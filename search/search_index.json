{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#xcube-smos","title":"xcube-smos","text":"<p>User-defined datacubes from SMOS Level-2 data</p> <p><code>xcube-smos</code> is a Python package and xcube plugin that adds a  data store  named <code>smos</code> to xcube. The data store is used to  access ESA SMOS Level-2 data  in form of analysis-ready geospatial datacubes with the dimensions  <code>time</code>, <code>lat</code>, and <code>lon</code>. The datacubes are computed on-the-fly from the SMOS  data archive <code>s3://EODATA/SMOS</code> hosted on CREODIAS.</p>"},{"location":"#usage","title":"Usage","text":"<p>After installation, data access is as easy as follows:</p> <pre><code>from xcube.core.store import new_data_store\n\nstore = new_data_store(\"smos\", **credentials)\ndatacube = store.open_data(\n    \"SMOS-L2C-SM\", \n    time_range=(\"2022-01-01\", \"2022-01-06\"),\n    bbox=(0, 40, 20, 60)\n)\n</code></pre> <p>Above, a datacube of type xarray.Dataset for SMOS Soil Moisture has been obtained. To access SMOS Ocean Salinity data use the identifier <code>\"SMOS-L2C-OS\"</code>. </p>"},{"location":"#features","title":"Features","text":"<p>The SMOS data is provided using a geographic projection.  Users can choose from five spatial resolutions by specifying a resolution  level ranging from zero to four. Zero refers to a resolution of  360/8192 ~ 0.044 degrees ~ 4.88 km. Higher levels subsequently increase the  resolution by a factor of two.</p> <p>Note</p> <p>The native spatial resolution of SMOS data is roughly 25 km.  <code>xcube-smos</code> performs an oversampling of the data to ensure no information is lost during spatial projection. It therefore uses a nearest-neighbor  resampling at higher resolution involving pixel duplication. </p> <p><code>xcube-smos</code> does not perform any aggregation in the time dimension. Data is  provided as-is, that is, up to 29 SMOS Level-2 data products are included  per day. </p>"},{"location":"about/","title":"About xcube-smos","text":""},{"location":"about/#changelog","title":"Changelog","text":"<p>You can find the complete <code>xcube-smos</code> changelog  here. </p>"},{"location":"about/#reporting","title":"Reporting","text":"<p>If you have suggestions, ideas, feature requests, or if you have identified a malfunction or error, then please  post an issue. </p>"},{"location":"about/#development","title":"Development","text":"<p>You can install <code>xcube-smos</code> directly from its GitHub repository into a xcube environment created with mamba (recommended) or conda.</p> <pre><code>mamba create -n xcube -c conda-forge xcube\nmamba activate xcube\ngit clone https://github.com/dcs4cop/xcube-smos.git\ncd xcube-smos\npip install --verbose --no-deps --editable .\n</code></pre>"},{"location":"about/#testing-and-coverage","title":"Testing and Coverage","text":"<p><code>xcube-smos</code> uses pytest for unit-level testing  and code coverage analysis.</p> <pre><code>pytest --cov=xcube-smos tests\n</code></pre>"},{"location":"about/#code-style","title":"Code Style","text":"<p><code>xcube-smos</code> source code is formatted using the black tool.</p> <pre><code>black xcube-smos\nblack tests\n</code></pre>"},{"location":"about/#documentation","title":"Documentation","text":"<p><code>xcube-smos</code> documentation is built using the mkdocs tool.</p> <pre><code>pip install -r requirements-doc.txt\n\nmkdocs build\nmkdocs serve\nmkdocs gh-deploy\n</code></pre>"},{"location":"about/#license","title":"License","text":"<p><code>xcube-smos</code> is open source made available under the terms and conditions of the  MIT License.</p> <p>Copyright \u00a9 2024 Brockmann Consult Development</p>"},{"location":"dev/","title":"xcube-smos Internals","text":""},{"location":"dev/#code-installation","title":"Code installation","text":""},{"location":"dev/#for-users","title":"For users","text":"<p>xcube-smos end users can install xcube-smos directly from its git repository into an xcube environment created with mamba (recommended) or conda.</p> <pre><code>mamba create -n xcube -c conda-forge xcube\nmamba activate xcube\ngit clone https://github.com/dcs4cop/xcube-smos.git\ncd xcube-smos\npip install --verbose --no-deps --editable .\n</code></pre>"},{"location":"guide/","title":"User Guide","text":"<p>This user guide is currently being written.</p>"},{"location":"guide/#obtaining-the-data-store","title":"Obtaining the Data Store","text":"<p>After installation and once you have your  credentials at hand, you can use the SMOS data store  using its class exported by the <code>xcube_smos.store</code> module:</p> <pre><code>from xcube_smos.store import SmosDataStore\n\nstore = SmosDataStore(key=\"your access key\", secret=\"your secret\")\n</code></pre> <p>However, the preferred way to obtain the store object is by its name <code>\"smos\"</code>  and using the xcube <code>new_data_store()</code> function, because many other xcube  data stores can be used in the same way:</p> <pre><code>from xcube.core.store import new_data_store\n\nstore = new_data_store(\"smos\", key=\"your access key\", secret=\"your secret\")\n</code></pre> <p>Note</p> <p>You can avoid passing <code>key</code> and <code>secret</code> arguments if you set the environment  variables <code>CREODIAS_S3_KEY</code> and <code>CREODIAS_S3_SECRET</code> accordingly.</p> <p>The <code>new_data_store()</code> function in its general form can take arbitrary keyword  arguments. The store identifier, here <code>\"smos\"</code> determines the allowed keywords. You can inspect the allowed data store keywords by using the xcube function <code>get_data_store_params_schema()</code>, which outputs the allowed parameters as a  JSON Schema object:</p> <pre><code>from xcube.core.store import get_data_store_params_schema\n\nget_data_store_params_schema(\"smos\")\n</code></pre>"},{"location":"guide/#data-store-parameters","title":"Data Store Parameters","text":"<p>Using the data store's <code>get_open_data_params_schema()</code> method you can  inspect the allowed parameters for the <code>store.open_data()</code> method, which is  used to access the SMOS data in various forms.</p> <pre><code>open_schema = store.get_open_data_params_schema()\nprint(open_schema)\n</code></pre>"},{"location":"guide/#data-access","title":"Data Access","text":"<p>All xcube data stores provide a <code>open_data()</code> method to access the data. It has one required positional argument <code>data_id</code> which identifies the data(set) to be opened. The SMOS store provides two datasets, they are</p> <ul> <li><code>\"SMOS-L2C-SM\"</code> - SMOS Level-2C Soil Moisture</li> <li><code>\"SMOS-L2C-OS\"</code> - SMOS Level-2C Ocean Salinity</li> </ul> <p>In the xcube data store framework, the different data representations  are provided by dedicated data openers. Hence, a common and optional  argument is <code>opener_id</code>, which is used to control how the data is  represented. The SMOS data store can currently provide three  different representations of SMOS data addressing different use cases:</p> <ul> <li><code>\"dataset:zarr:smos\"</code> (the default) - represent data as a datacube including     all observations in the given time range at a fixed spatial resolution;</li> <li><code>\"mldataset:zarr:smos\"</code> - represent data as a multi-resolution datacube     including all observations in the given time range including 5 spatial     resolution levels;</li> <li><code>\"smosdsiter:zarr:smos\"</code> - represent data as an iterator providing datasets     for all the observations in the given time range at a fixed spatial     resolution. </li> </ul>"},{"location":"guide/#common-access-parameters","title":"Common Access Parameters","text":""},{"location":"guide/#datacube","title":"Datacube","text":""},{"location":"guide/#multi-resolution-datacube","title":"Multi-Resolution Datacube","text":""},{"location":"guide/#dataset-iterators","title":"Dataset Iterators","text":""},{"location":"start/","title":"Getting Started","text":""},{"location":"start/#credentials","title":"Credentials","text":"<p>The xcube SMOS data store directly accesses  SMOS data in its S3 archive on  CREODIAS. Therefore, the data store requires your  credentials. If not already done, create an account on CREODIAS and follow  the instructions to  generate your access key and secret.</p> <p>Once you have received your credentials, you may consider setting the environment  variables <code>CREODIAS_S3_KEY</code> and <code>CREODIAS_S3_SECRET</code>. If you do so, you can omit the <code>key</code> and <code>secret</code> arguments passed to the data store.</p>"},{"location":"start/#installation","title":"Installation","text":"<p>You can install xcube-smos as a conda package:</p> <pre><code>conda install -c conda-forge xcube-smos\n</code></pre> <p>Or install it from its GitHub sources into a Python environment with xcube and its dependencies installed.</p> <pre><code>git clone https://github.com/dcs4cop/xcube-smos.git\ncd xcube-smos\npip install -ve .\n</code></pre>"},{"location":"start/#get-the-data","title":"Get the Data","text":"<p>You can now use the SMOS data store using the xcube <code>new_data_store()</code>  function and passing the store identifier <code>\"smos\"</code> and using your credentials. Then you use the store method <code>open_data()</code> to access the data:</p> <pre><code>from xcube.core.store import new_data_store\n\nstore = new_data_store(\"smos\", \n                       key=\"your access key\", \n                       secret=\"your access key secret\")\n\ndataset = store.open_data(data_id=\"SMOS-L2C-SM\",\n                          time_range=(\"2022-01-01\", \"2022-01-05\"), \n                          bbox=(5.87, 47.27, 15.03, 55.06),\n                          res_level=0)\n</code></pre> <p>There are a couple of parameters that can be passed to the <code>new_data_store()</code> function and the <code>open_data()</code> method. You can read more about it in the  user guide.</p>"}]}